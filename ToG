#Notes on a theory of graphs
We describe an algebraic theory of graphs. The theory is dependent on a theory of variables and a theory of vertices. Thus, we denote the theory $\mathsf{G}[X,V]$. The theory is notable in that it requires a double recursion to specify well-formed graphs. We give the well-formedness conditions as a recursive relation that also depends on a recursive relation for membership in a graph. We write

$$\mathsf{G}[X,V] \vdash g$$

to mean that $g$ is wellformed in $\mathsf{G}[X,V]$ and we use Plotkin-style SOS rules of the form 

$$\frac{ \mathsf{G}[X,V] \vdash g_1 \;  \ldots \; \mathsf{G}[X,V] \vdash g_n}{ \mathsf{G}[X,V] \vdash K(g_1,\ldots, g_n)}Kctor$$

to indicate that a graph, $K(g_1,\ldots,g_n)$, constructed from well-formed graphs $g_1,\ldots,g_n$, using the constructor $K$, is well-formed.

As mentioned above, we also use a membership relation, written $\mathsf{G}[X,V] \vdash v \in g$, in the specification of the well-formedness relation, specifically as conditions in the hypothesis of the rules.

The motivation for the development of the theory is complexity management. Graphs are used primarily in computations. As such they should be algorithmically specified. The standard presentation of graphs does not treat them as algorithmically specified. To understand this lack consider the standard presentation of a linked list.

$\mathsf{List}[A] = 1 + A \times \mathsf{List}[A]$

This recursive specification matches the standard interpretation of lists containing elements of type $A$ as either empty or formed by consing an element of type $A$ onto a list containing elements of type $A$. It is typically used in algorithmic specifications of calculations involving lists. By contrast graphs are typically presented as collections of vertices and edges, rather than as a recursive data type involving operations that build graphs from graphs. This conception permeates many tools and software libraries that provide computational support for calculating with graphs and result in nearly overwhelming complexity. 

An excellent example is the popular tool GraphViz and the dotty language. Using dotty to specify the complete graph of 100 nodes is an enormous task. The recursive data type resulting from the theory of graphs presented here results in a single line specification of the complete graph. More generally, in the examples we present we see an exponentially jump in complexity in the types of graphs being characterized and yet the algorithmic characterizations remain typical 1-line recursive specifications.

## Well-formedness

$$\frac{  }{ \mathsf{G}[X,V] \vdash 0}Foundation$$

$$\frac{ \mathsf{G}[X,V] \vdash g }{ \mathsf{G}[X,V] \vdash v \to g}Participation$$

$$\frac{ \mathsf{G}[X,V] \vdash g_1 \; \mathsf{G}[X,V] \vdash g_2}{ \mathsf{G}[X,V] \vdash g_1 \otimes g_2}Autonomy$$

$$\frac{ \mathsf{G}[X,V] \vdash g \; \;\mathsf{G}[X,V] \vdash v \in g}{ \mathsf{G}[X,V] \vdash \mathsf{let}\; x = v \; \mathsf{in}\; g}Vertex Selection$$

$$\frac{ \mathsf{G}[X,V] \vdash \mathsf{let}\; x_1 = v_1 \; \mathsf{in}\; g_1 \; \;\mathsf{G}[X,V] \vdash \mathsf{let}\; x_2 = v_2 \; \mathsf{in}\; g_2}{ \mathsf{G}[X,V] \vdash (\mathsf{let}\; x_1 = v_1 \; \mathsf{in}\; g_1, \mathsf{let}\; x_2 = v_2 \; \mathsf{in}\; g_2)}Connection$$

### Graph references
In many instances it it useful to refer not only to vertices and edges but whole graphs. For this we assume that the collection of variables is actually divided into two distinct sub-collections; that is, we require $X = X_v + X_g$. Notationally, we will use lowercase letters such as $x$, $y$, $z$ to range over $X_v$ and uppercase letters such as $A$, $B$, $C$, etc to range over $X_g$. When we are building graphs using references to graphs we need to expand the theory to include more common cyclic definitions as is typically found in functional languages involving $\mathsf{letrec}$.

$$\frac{ \mathsf{G}[X,V] \vdash g_1 \; \;\mathsf{G}[X,V] \vdash g_2}{ \mathsf{G}[X,V] \vdash \mathsf{let}\; A = g_1 \; \mathsf{in}\; g_2}Graph Selection$$

$$\frac{ \mathsf{G}[X,V] \vdash g_1 \; \;\mathsf{G}[X,V] \vdash g_2}{ \mathsf{G}[X,V] \vdash \mathsf{let}\; A = g_1 \; \mathsf{in}\; g_2}Graph Selection$$

## Membership

$$\frac{  }{ \mathsf{G}[X,V] \vdash v \in v \to g}Ground$$

$$\frac{ \mathsf{G}[X,V] \vdash v \in g }{ \mathsf{G}[X,V] \vdash v \in g \otimes g'}Union$$

$$\frac{ \mathsf{G}[X,V] \vdash v \in g }{ \mathsf{G}[X,V] \vdash v \in \mathsf{let}\; x = v \; \mathsf{in}\; g}Transparency$$

$$\frac{ \mathsf{G}[X,V] \vdash v \in g_1 }{ \mathsf{G}[X,V] \vdash v \in (\mathsf{let}\; x_1 = v_1 \; \mathsf{in}\; g_1, \mathsf{let}\; x_2 = v_2 \; \mathsf{in}\; g_2)}Link-left$$

$$\frac{ \mathsf{G}[X,V] \vdash v \in g_2 }{ \mathsf{G}[X,V] \vdash v \in (\mathsf{let}\; x_1 = v_1 \; \mathsf{in}\; g_1, \mathsf{let}\; x_2 = v_2 \; \mathsf{in}\; g_2)}Link-right$$

##Equations
$$\frac{ }{ \mathsf{G}[X,V] \vdash 0 \otimes g = g}Identity$$

$$\frac{ }{ \mathsf{G}[X,V] \vdash g_1 \otimes g_2 = g_2 \otimes g_1}Symmetry$$

$$\frac{ }{ \mathsf{G}[X,V] \vdash g_1 \otimes ( g_2 \otimes g_3 ) = ( g_1 \otimes g_2) \otimes g_3}Associativity$$

$$\frac{ }{ \mathsf{G}[X,V] \vdash \mathsf{let}\; x = v \; \mathsf{in}\; \mathsf{let}\; x' = v \; \mathsf{in}\; g = \mathsf{let}\; x = v \; \mathsf{in}\; g}Frugality$$

##Pronunciation
The graph constructors are pronounced as follows.

 - $0$ -- "the empty graph", or just "empty";
 - $v \to g$ -- "$g$ with the vertex $v$ adjoined", or "adjoin $v$ to $g$";
 - $g_1 \otimes g_2$ -- "the graph formed by juxtaposing $g_1$ and $g_2$", or "juxtapose $g_1$ and $g_2$", or just "$g_1$ and $g_2$";
 - $\mathsf{let}\; x = v \; \mathsf{in}\; g$ -- "let $x$ be $v$ in $g$";
 - $(\mathsf{let}\; x_1 = v_1 \; \mathsf{in}\; g_1,\mathsf{let}\; x_2 = v21 \; \mathsf{in}\; g_2)$ -- "the graph formed by connecting $g_1$ to $g_2$ with and edge from $x_1$ to $x_2$"; or, "connect $g_1$ to $g_2$ with and edge from $x_1$ to $x_2$".

The judgment $\mathsf{G}[X,V] \vdash g$ is pronounced "$\mathsf{G}[X,V]$ thinks that $g$ is well-formed." A rule of the form

$$\frac{ H_1, \ldots , H_n }{ C }R$$

is pronounced "$R$ concludes $C$ given $H_1$, $\ldots$, $H_n$". Taken all together we pronounce 

$$\frac{ \mathsf{G}[X,V] \vdash g \; \;\mathsf{G}[X,V] \vdash v \in g}{ \mathsf{G}[X,V] \vdash \mathsf{let}\; x = v \; \mathsf{in}\; g}Selection$$

"Selection concludes that $\mathsf{G}[X,V]$ thinks that the graph that lets $x$ be $v$ in $g$ is well formed given that $g$ is well formed and $v$ is in $g$."

# Examples

## Graphs as morphism
Let $X$ be some set of variables, $D$ be some domain, such as $Nat$, the natural numbers, or $Bool$, the booleans. We can describe many graphs as morphisms, $g(X,D): D \to \mathsf{G}[X,D]$.
### The discrete graph
The discrete graph of $n$ elements, written $\mathsf{discrete}(n)$, is simply $n$ unconnected vertices. Noting that the graph consisting of a single vertex, $n$, has the form $n \to 0$, which adjoins $n$ to the empty graph, $0$, we can define the domain of discrete graphs recursively. 

$\mathsf{discrete}(0) = 0$
$\mathsf{discrete}(n) = n \to 0 \otimes \mathsf{discrete}(n-1)$

### Domain elements as variables
Sometimes it is convenient to use domain elements as variables as well as vertices; that is, it is often useful to form graphs from $\mathsf{G}[D,D]$. In this case, we distinguish the mention of a domain element, say $d$, in the role of a variable from the mention in the role of a vertex by quotation marks. Specifically, we write $\ulcorner d\urcorner$  when using $d$ as a variable versus merely $d$ when using $d$ as a vertex. An example in context this might look like $\mathsf{let}\; \ulcorner d\urcorner = d \; \mathsf{in}\; g$.

### The chain
Using these two ideas we can give a recursive definition of the domain of chains. As with the discrete graph, the chain of $0$ elements is the empty graph. The chain of a single element is not simply adjoining that element as a vertex to the empty graph. It also selects that element. Then the recursive specification creates an edge between the graph containing a single element, $n \to 0$, and the chain of $n-1$ elements by selecting the element, $n$ and calling it $\ulcorner 2n-1\urcorner$, and then linking the two resulting graphs. To ensure that the result is linkable it selects the element again, this time calling it $\ulcorner 2n \urcorner$.

$\mathsf{chain}(0) = 0$
$\mathsf{chain}(1) = \mathsf{let}\; \ulcorner 2\urcorner = 1 \; \mathsf{in}\; 1 \to 0$
$\mathsf{chain}(n) = \mathsf{let}\; \ulcorner2n\urcorner = n \; \mathsf{in}\;(\mathsf{let}\; \ulcorner 2n-1\urcorner = n \; \mathsf{in}\; n \to 0, \mathsf{chain}(n-1))$

$$\mathsf{chain}(2) = \mathsf{let}\; \ulcorner 4 \urcorner = 2 \; \mathsf{in}\; (\mathsf{let}\; \ulcorner 3 \urcorner = 2 \; \mathsf{in}\; 2 \to 0, \mathsf{let}\; \ulcorner 2\urcorner = 1 \; \mathsf{in}\; 1 \to 0)$$

### The cycle
$\mathsf{cycle}(0) = 0$
$\mathsf{cycle}(1) = \mathsf{let}\; \ulcorner 1\urcorner = 1 \; \mathsf{in}\; 1 \to 0$
$\mathsf{cycle}(n) = (\mathsf{let}\; \ulcorner n\urcorner = n \; \mathsf{in}\; n \to 0 \to 0, \mathsf{chain}(n))$

##Rewrite systems

### The $\lambda$-calculus
Let $M$ denote the set of terms in the $\lambda$-calculus, and $t$, $u$, $\ldots$ range over terms in $M$. We form graphs of the reductions of terms, $\mathsf{G}[M,M]$ by filtering edges for $\beta$-reduction. To avoid confusion in the sequel we will write $\ulcorner t\urcorner$ when using $t$ as a variable, and unadorned when considering it as a term. More concretely, given 

$\mathsf{lift}(t) = \mathsf{let}\; \ulcorner t \urcorner = t \; \mathsf{in}\; t \to 0$ 

we lift terms to graphs using

$$\frac{  }{ \mathsf{G}[M,M] \vdash \mathsf{lift}(t) }embedding$$

and then filter edges by the condition

$$\frac{ \mathsf{G}[M,M] \vdash \mathsf{lift}(t) \; \;\mathsf{G}[M,M] \vdash \mathsf{lift}(u)\;\; t \to u}{ \mathsf{G}[X,V] \vdash (\mathsf{lift}(t),\mathsf{lift}(u))}reduction$$



